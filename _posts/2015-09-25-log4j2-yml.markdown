---
layout: post
title:  "Spring boot: use YAML to configure log4j2"
date:   2015-09-25 23:56:45
comments: true
categories:
- blog
permalink: log4j-yml
description: Example of using YAML to configure log4j2 on a Spring boot application.
---

Let's see how to use YAML to configure log4j2 on a Spring boot application.

## Maven

Basically, you need to exclude from your pom.xml the dependency to`spring-boot-starter-logging` and add instead
`spring-boot-starter-log4j2`. Then to work with YAML you have to add the dependency to `jackson-dataformat-yaml`.

{% highlight xml%}
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter</artifactId>
    <exclusions>
        <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-log4j2</artifactId>
</dependency>
<dependency>
  <groupId>com.fasterxml.jackson.dataformat</groupId>
  <artifactId>jackson-dataformat-yaml</artifactId>
  <version>2.6.0-rc4</version>
</dependency>
{% endhighlight %}

## YAML

The configuration goes in a file named `log4j2.yml` located in the folder `resources`. Hereunder is an example of
configuration. There are two
appenders, `console` and
`rolling file` then, there is the root logger and two specialized loggers for two classes.

{% highlight javascript%}
Configutation:
  status: warn

  Appenders:
    Console:
      name: CONSOLE
      target: SYSTEM_OUT
      PatternLayout:
        Pattern: "%d{ISO8601} %-5p [%c{3}] [%t] %m%n"
    RollingFile:
      - name: APPLICATION
        fileName: ../logs/my-app.log
        filePattern: "../logs/$${date:yyyy-MM}/my-app-%d{yyyy-MM-dd}-%i.log.gz"
        PatternLayout:
          Pattern: "%d{ISO8601} %-5p [%c{3}] [%t] %m%n"
        policies:
          TimeBasedTriggeringPolicy:
            interval: 1
            modulate: true

  Loggers:
      Root:
        level: info
        AppenderRef:
          - ref: CONSOLE
          - ref: APPLICATION
      Logger:
        - name: com.myco.myapp.Foo
          additivity: false
          level: info
          AppenderRef:
            - ref: CONSOLE
            - ref: APPLICATION
        - name: com.myco.myapp.Bar
          additivity: false
          level: debug
          AppenderRef:
            - ref: CONSOLE
            - ref: APPLICATION
{% endhighlight %}

## Class

Examples using slf4j:

- In Groovy.

{% highlight java%}
@Slf4j
class Foo {
  // some code
  log.debug("Test debug: $myvar")
}
{% endhighlight %}

- In Java.

{% highlight java%}
public class Bar{
  private Logger logger = LoggerFactory.getLogger(Bar.class);

  // some code
  logger.debug("Test debug: {}", myvar);
}
{% endhighlight %}